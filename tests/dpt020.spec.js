const assert = require('assert')
const knxDatapoints = require('../')

suite('dpt20', () => {
  test('decode', () => {
    assert.strictEqual(knxDatapoints.decode('20.001', Buffer.from('00', 'hex')), 0)
    assert.strictEqual(knxDatapoints.decode('20.001', Buffer.from('64', 'hex')), 100)
    assert.strictEqual(knxDatapoints.decode('20.001', Buffer.from('FF', 'hex')), 255)

    assert.throws(() => { knxDatapoints.decode('20.001', Buffer.alloc(0)) }, Error)
    assert.throws(() => { knxDatapoints.decode('20.001', Buffer.alloc(2, 0)) }, Error)
    assert.throws(() => { knxDatapoints.decode('20.001', undefined) }, TypeError)
  })

  test('encode', () => {
    assert.ok(knxDatapoints.encode('20.001', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.001', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.001', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.001', 3).equals(Buffer.from('03', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.001', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.001', 4) }, RangeError)

    assert.ok(knxDatapoints.encode('20.003', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.003', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.003', 2).equals(Buffer.from('02', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.003', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.003', 3) }, RangeError)

    assert.ok(knxDatapoints.encode('20.006', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.006', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.006', 10).equals(Buffer.from('0A', 'hex')))
    assert.ok(knxDatapoints.encode('20.006', 14).equals(Buffer.from('0E', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.006', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.006', 2) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.006', 15) }, RangeError)

    assert.ok(knxDatapoints.encode('20.012', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.012', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.012', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.012', 3).equals(Buffer.from('03', 'hex')))
    assert.ok(knxDatapoints.encode('20.012', 4).equals(Buffer.from('04', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.012', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.012', 5) }, RangeError)

    assert.ok(knxDatapoints.encode('20.011', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.011', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.011', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.011', 18).equals(Buffer.from('12', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.011', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.011', 19) }, RangeError)

    assert.ok(knxDatapoints.encode('20.013', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.013', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.013', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.013', 25).equals(Buffer.from('19', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.013', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.013', 26) }, RangeError)

    assert.ok(knxDatapoints.encode('20.014', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.014', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.014', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.014', 12).equals(Buffer.from('0C', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.014', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.014', 13) }, RangeError)

    assert.ok(knxDatapoints.encode('20.020', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.020', 2).equals(Buffer.from('02', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.020', 0) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.020', 3) }, RangeError)

    assert.ok(knxDatapoints.encode('20.105', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.105', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.105', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.105', 17).equals(Buffer.from('11', 'hex')))
    assert.ok(knxDatapoints.encode('20.105', 20).equals(Buffer.from('14', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.105', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.105', 18) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.105', 21) }, RangeError)

    assert.ok(knxDatapoints.encode('20.106', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.106', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.106', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.106', 5).equals(Buffer.from('05', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.106', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.106', 6) }, RangeError)

    assert.ok(knxDatapoints.encode('20.108', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.108', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.108', 5).equals(Buffer.from('05', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.108', 0) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.108', 6) }, RangeError)

    assert.ok(knxDatapoints.encode('20.109', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.109', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.109', 4).equals(Buffer.from('04', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.109', 0) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.109', 5) }, RangeError)

    assert.ok(knxDatapoints.encode('20.110', 1).equals(Buffer.from('01', 'hex')))
    assert.ok(knxDatapoints.encode('20.110', 2).equals(Buffer.from('02', 'hex')))
    assert.ok(knxDatapoints.encode('20.110', 3).equals(Buffer.from('03', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.110', 0) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.110', 4) }, RangeError)

    assert.ok(knxDatapoints.encode('20.121', 0).equals(Buffer.from('00', 'hex')))
    assert.ok(knxDatapoints.encode('20.121', 1).equals(Buffer.from('01', 'hex')))
    assert.throws(() => { knxDatapoints.encode('20.121', -1) }, RangeError)
    assert.throws(() => { knxDatapoints.encode('20.121', 2) }, RangeError)
  })
})
